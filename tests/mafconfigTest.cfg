# Config to exercise all the major driver functions

import numpy as np
from lsst.sims.maf.driver.mafConfig import *
import os

# Setup Database access.  Note:  Only the "root.XXX" variables are passed to the driver.
root.outDir = './Output'
filepath = os.path.join(os.getenv('SIMS_MAF_DIR'), 'tests/')
root.dbAddress ={'dbAddress':'sqlite:///' + filepath + 'opsimblitz1_1133_sqlite.db'}
root.opsimName = 'OpsimTest'


# Setup a list to hold all the slicers we want to run
slicerList=[]
colors={'u':'m','g':'b','r':'g','i':'y','z':'Orange','y':'r'}
filters=['r','g']
# How many Healpix sides to use
nside=4

# List of SQL constraints.  If multiple constraints are listed in a slicer object, they are looped over and each one is executed individualy.
constraints = ["filter = \'%s\' and night < 15"%'r', "filter = \'%s\' and night < 15"%'g']

# Configure a Healpix slicer:
m1 = configureMetric('CountMetric', kwargs={'col':'expMJD'}, plotDict={'percentileClip':80., 'units':'#'}, summaryStats={'MeanMetric':{}})
m2 = configureMetric('Coaddm5Metric', kwargs={'m5Col':'fiveSigmaDepth'}, plotDict={'zp':27., 'percentileClip':95, 'units':'Co-add m5 - %.1f'%27.})
m3 = configureMetric('ParallaxMetric', kwargs={'m5Col':'fiveSigmaDepth'}) #this should automatically call a stacker
# Combine metrics in a dictionary
metricDict = makeDict(m1,m2,m3)
# Generate the slicer configuration, passing in the metric configurations and SQL constraints
slicer = configureSlicer('HealpixSlicer',
                          kwargs={"nside":nside,'spatialkey1':"fieldRA", 'spatialkey2':"fieldDec"},
                          metricDict = metricDict, constraints=constraints)
# Add the slicer to the list of slicers
slicerList.append(slicer)

# Run the same metrics, but now use the hexdither field positions:
# As before, but new spatialkeys and add a metadata keyword so the previous files don't get overwritten
slicer = configureSlicer('HealpixSlicer',
                          kwargs={"nside":nside,'spatialkey1':"ditheredRA", 'spatialkey2':"ditheredDec"},
                          metricDict = metricDict,constraints=constraints, metadata='dith')
# Add this slicer to the list of slicers
slicerList.append(slicer)


# Configure a OneDSlicer:
# Configure a new metric
m1 = configureMetric('CountMetric', kwargs={'col':'slewDist'})
metricDict=makeDict(m1)
slicer = configureSlicer('OneDSlicer', kwargs={'sliceColName':'slewDist'},
                          metricDict=metricDict, constraints=constraints)
slicerList.append(slicer)


m1 = configureMetric('CountMetric', kwargs={'col':'normairmass', 'metricName':'normAir_hex'})
metricDict=makeDict(m1)
stacker = configureStacker('NormAirmassStacker', kwargs={'decCol':'ditheredDec'})
slicer = configureSlicer('OneDSlicer', kwargs={"sliceColName":'normairmass'},
       metricDict=metricDict, constraints=constraints, stackerDict = makeDict(stacker))
slicerList.append(slicer)

m1 = configureMetric('CountMetric', kwargs={'col':'normairmass'})
metricDict=makeDict(m1)
slicer = configureSlicer('OneDSlicer', kwargs={"sliceColName":'normairmass'},
                          metricDict=metricDict, constraints=constraints)
slicerList.append(slicer)

# Configure an OpsimFieldSlicer:
for f in filters:
    m1 = configureMetric('MinMetric', kwargs={'col':'airmass'}, plotDict={'cmap':'RdBu'}, histMerge={'histNum':1, 'color':colors[f]})
    m4 = configureMetric('MeanMetric', kwargs={'col':'normairmass'})
    m3 = configureMetric('Coaddm5Metric',kwargs={'m5Col':'fiveSigmaDepth'})
    m7 = configureMetric('CountMetric', kwargs={'col':'expMJD'}, plotDict={'units':"#", 'percentileClip':80.})
    metricDict = makeDict(m1,m3,m4,m7)
    slicer = configureSlicer('OpsimFieldSlicer', metricDict=metricDict, constraints=["filter = \'%s\' and night < 15"%f] )
    slicerList.append(slicer)


# Configure a UniSlicer.  
m1 = configureMetric('MeanMetric', kwargs={'col':'airmass'})
slicer = configureSlicer('UniSlicer', metricDict=makeDict(m1), constraints=["filter = \'%s\' and night < 15"%'r'] )
slicerList.append(slicer)
# Configure an Hourglass filter slicer/metric
m1=configureMetric('HourglassMetric')
slicer = configureSlicer('HourglassSlicer', metricDict=makeDict(m1), constraints=["filter = \'%s\' and night < 15"%'r'])
slicerList.append(slicer)

#configure a oneD and histmerge:
for f in filters:
    m1 =configureMetric('CountMetric', kwargs={'col':'fiveSigmaDepth'},
                        histMerge={'histNum':2, 'legendloc':'upper right', 'color':colors[f],'label':'%s'%f} )
    slicer = configureSlicer('OneDSlicer', kwargs={"sliceColName":'fiveSigmaDepth', 'binsize':10},
                              metricDict=makeDict(m1), constraints=["filter = '%s'"%(f)]) 
    slicerList.append(slicer)



# Save all the slicers to the config
root.slicers=makeDict(*slicerList)


# Optional comment string
root.comment = 'a config file that tries to exercise everything in the driver as a unit test'
