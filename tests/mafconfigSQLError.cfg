# to run:
# python runConfig.py allSlicerCfg.py

# Make sure summary stats are getting computed in all cases.

import numpy as np
from lsst.sims.maf.driver.mafConfig import *
import os

# Setup Database access.  Note:  Only the "root.XXX" variables are passed to the driver.
root.outputDir = './Output'
filepath = os.path.join(os.getenv('SIMS_MAF_DIR'), 'tests/')
root.dbAddress ={'dbAddress':'sqlite:///' + filepath + 'opsimblitz1_1133_sqlite.db'}
root.opsimName = 'OpsimTest'

filter='r'
# Setup a list to hold all the slicers we want to run
slicerList=[]

# Configure a Healpix slicer:
m1 = configureMetric('CountMetric', kwargs={'col':'expMJD'},plotDict={'percentileClip':80., 'units':'#'})
m2 = configureMetric('Coaddm5Metric', plotDict={'zp':27., 'percentileClip':95, 'units':'Co-add m5 - %.1f'%27.}, summaryStats={'MeanMetric':{},'RmsMetric':{}, })
m3 = configureMetric('VisitPairs', summaryStats={'MeanMetric':{}})
# Combine metrics in a dictionary
metricDict = makeDict(m1,m2)
# Generate the slicer configuration, passing in the metric configurations and SQL constraints
slicer = configureSlicer('OpsimFieldSlicer', metricDict=metricDict, constraints=["filter = \'%s\'"%(filter), '', '']) #make a repeat
slicerList.append(slicer)
# Add the slicer to the list of slicers
slicerList.append(slicer)


# Save all the slicers to the config
root.slicers=makeDict(*slicerList)

