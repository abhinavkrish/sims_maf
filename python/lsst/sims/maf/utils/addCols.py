import numpy as np
import numpy.lib.recfunctions as rfn

class BaseStacker(object):
    """Base MAF Stacker: add columns generated at run-time to the simdata array."""
    def __init__(self):
        """
        Instantiate the stacker. 
        This method should be overriden by the user. This serves as an example of 
        the variables required by the framework.
        Users should replace this method with their own implementation.
        """
        # List of the names of the columns generated by the Stacker.
        self.colsAdded = None
        # List of the names of the columns required from the database (to generate the Stacker columns).
        self.colsReq = None
        # Optional: provide a list of units for the columns defined in colsAdded.
        self.units = None
        
    def _addStackers(self, simData):
        """
        Add the new Stacker columns to the simData array. 
        If columns already present in simData, just allows 'run' method to overwrite.
        Returns simData array with these columns added (so 'run' method can set their values). 
        """        
        newcols = []
        for colName in self.colsAdded:
            if colName not in simData:
                newcol = np.zeros(len(simData), dtype=[(colName, float)])
                newcols.append(newcol)    
        newcols = rfn.merge_arrays(newcols, flatten=True, usemask=False)
        return rfn.merge_arrays([simData, newcols], flatten=True, usemask=False)

    def run(self, simData):
        """
        Generate the new stacker columns, given the simdata columns from the database. 
        Returns the new simdata structured aray that includes the new stacker columns. 
        Users should replace this method with their own implementation. 
        """
        # Add new columns
        self._addStackers(simData)
        # Populate the data in those columns.
        ## simData['newcol'] = XXXX
        return simData



# Add some random dithers in RA/Dec

class RandomDither(BaseStacker):
    """Randomly dither the RA and Dec pointings up to maxDither degrees from center."""
    def __init__(self, raCol='fieldRA', decCol='fieldDec', maxDither=1.8, randomSeed=None):
        # Instantiate the RandomDither object and set internal variables. 
        self.raCol = raCol
        self.decCol = decCol
        self.maxDither = maxDither * np.pi / 180.0
        self.randomSeed = randomSeed
        # self.units used for plot labels
        self.units = 'rad'
        # Values required for framework operation: this specifies the names of the new columns.
        self.colsAdded = ['randomRADither', 'randomDecDither']
        # Values required for framework operation: this specifies the data columns required from the database.
        self.colsReq = [self.raCol, self.decCol]

    def run(self, simData):
        # Generate random numbers for dither, using defined seed value if desired.
        if self.randomSeed is not None:
            np.random.seed(self.randomSeed)
        simData = self._addStackers(simData)        
        dithersRA = np.random.rand(len(simData[self.raCol]))
        dithersDec = np.random.rand(len(simData[self.decCol]))
        # np.random.rand returns numbers in [0, 1) interval.
        # Scale to desired +/- maxDither range.
        dithersRA = dithersRA*np.cos(simData[self.decCol])*2.0*self.maxDither - self.maxDither
        dithersDec = dithersDec*2.0*self.maxDither - self.maxDither
        # Add to RA and wrap back into expected range.
        simData['randomRADither'] = simData[self.raCol] + dithersRA
        simData['randomRADither'] = simData['randomRADither'] % (2.0*np.pi)
        # Add to Dec and wrap back into expected range.
        simData['randomDecDither'] = simData[self.decCol] + dithersDec
        simData['randomDecDither'] = np.where(simData['randomDecDither'] < -np.pi/2.0, -1.*(np.pi + simData['randomDecDither']), simData['randomDecDither'])
        simData['randomDecDither'] = np.where(simData['randomDecDither'] > np.pi/2.0, (np.pi - simData['randomDecDither']), simData['randomDecDither']) 
        return simData
